.. _section_advanced:

================================================================================
Advanced usage of ADAO
================================================================================

This section presents advanced methods to use the ADAO module, how to get more
information, or how to use it without the graphical user interface (GUI).

Exporting an ADAO command file (JDC) to YACS in console mode
--------------------------------------------------------------------------------

An export command can use the Python file generated by the editor used to build
the ADAO command file (JDC). If the ADAO command file is named "Study1.comm",
then a file named "Study1.py" can be found in the same directory. The complete
procedure is the following:

#.      using the SALOME application including ADAO module, launch SALOME with ``./runAppli -k``
#.      initialise the command line session with: ``./runSession``
#.      execute the export command: ``python ${ADAO_ROOT_DIR}/bin/salome/AdaoYacsSchemaCreator.py <input Python file> <output YACS xml scheme>``
#.      standard output comes on console, successive executions can be done
#.	stop SALOME:  ``shutdownSalome.py`` or ``killSalome.py``
#.	exit from the session: ``CTRL+D``

Be careful, if the output YACS xml scheme already exists, this command replace
it without asking the user. The command accepts files with or without path
specifications.

It is not necessary to launch and shut down SALOME each time if the application
is already running.

Running an ADAO calculation scheme in YACS in console mode
--------------------------------------------------------------------------------

This section describes how to execute in console mode a YACS calculation scheme,
obtained using the ADAO "Export to YACS" function. It uses the standard YACS
console mode, which will be briefly recall here (see YACS documentation for more
information).

The way to do that is as follows:

#.      using the SALOME application including ADAO module, launch SALOME with ``./runAppli -k``
#.      initialise the command line session with: ``./runSession``
#.      change to the YACS calculation scheme directory to be executed
#.      execute the YACS supervisor:  ``driver <ADAO YACS xml scheme>``
#.      standard output comes on console, successive executions can be done
#.	stop SALOME:  ``shutdownSalome.py`` or ``killSalome.py``
#.	exit from the session: ``CTRL+D``

It is not necessary to launch and shut down SALOME each time if the application
is already running.

Getting more information when running an assimilation calculation
--------------------------------------------------------------------------------

--TODO--

(Use the logging functionality of the library)


Complex time or step treatments during an assimilation calculation
--------------------------------------------------------------------------------

--TODO--

(Scheduling input data)
