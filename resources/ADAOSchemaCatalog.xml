<?xml version='1.0' encoding='iso-8859-1' ?>
<proc>
  
  <objref name="computeAD" id="python:computeAD:1.0">
    <base>pyobj</base>
  </objref>

  <inline name="CreateAssimilationStudy">
    <script><code>

<![CDATA[
import numpy
print "Entering in CreateAssimilationStudy"
print "Name is", Name
print "Algorithm is", Algorithm

# Create Assimilation study
from daYacsIntegration.daStudy import *
assim_study = daStudy(Name, Algorithm)

# Algorithm parameters
try:
  AlgorithmParameters
except NameError:
  pass
else:
  assim_study.setAlgorithmParameters(AlgorithmParameters)

# Data
print "Data entered are:"
# Background
try:
  Background
except NameError:
  pass
else:
  #print "Background is", Background
  #print "BackgroundType is", BackgroundType
  assim_study.setBackgroundType(BackgroundType)
  assim_study.setBackground(Background)

# BackgroundError
try:
  BackgroundError
except NameError:
  pass
else:
  #print "BackgroundError is", BackgroundError
  #print "BackgroundErrorType is", BackgroundErrorType
  assim_study.setBackgroundError(BackgroundError)

# Observation
try:
  Observation
except NameError:
  pass
else:
  #print "Observation is", Observation
  #print "ObservationType is", ObservationType
  assim_study.setObservationType(ObservationType)
  assim_study.setObservation(Observation)

# ObservationError
try:
  ObservationError
except NameError:
  pass
else:
  #print "ObservationError is", ObservationError
  #print "ObservationErrorType is", ObservationErrorType
  assim_study.setObservationError(ObservationError)

# ObservationOperator
ObservationOperatorOk = 0
try:
  ObservationOperator
except NameError:
  pass
else:
  #print "ObservationOperator is", ObservationOperator
  #print "ObservationOperatorType is", ObservationOperatorType
  assim_study.setObservationOperatorType("Matrix", ObservationOperatorType)
  assim_study.setObservationOperator("Matrix", ObservationOperator)
  ObservationOperatorOk = 1

if ObservationOperatorOk == 0:
  try:
    ObservationOperatorDirect
  except NameError:
    pass
  else:
    #print "ObservationOperatorDirect is", ObservationOperatorDirect
    assim_study.setObservationOperatorType("Direct", "Function")
    assim_study.setObservationOperator("Direct", ObservationOperatorDirect)
  try:
    ObservationOperatorTangent
  except NameError:
    pass
  else:
    #print "ObservationOperatorTangent is", ObservationOperatorTangent
    assim_study.setObservationOperatorType("Tangent", "Function")
    assim_study.setObservationOperator("Tangent", ObservationOperatorTangent)
  try:
    ObservationOperatorAdjoint
  except NameError:
    pass
  else:
    #print "ObservationOperatorAdjoint is", ObservationOperatorAdjoint
    assim_study.setObservationOperatorType("Adjoint", "Function")
    assim_study.setObservationOperator("Adjoint", ObservationOperatorAdjoint)


Study = assim_study
]]>

</code></script>
    <inport name="Name" type="string"/>
    <inport name="Algorithm" type="string"/>
    <outport name="Study" type="pyobj"/>
  </inline>

  <inline name="CreateNumpyMatrixFromString">
    <script><code><![CDATA[
print "Entering in CreateNumpyMatrixFromString"
import numpy
matrix = numpy.matrix(matrix_in_string)
type = "Matrix"
print "Matrix is", matrix
]]></code></script>
    <inport name="matrix_in_string" type="string"/>
    <outport name="matrix" type="pyobj"/>
    <outport name="type" type="string"/>
  </inline>

  <inline name="CreateNumpyMatrixFromScript">
    <script><code><![CDATA[
print "Entering in CreateNumpyMatrixFromScript"
execfile(script)
type = "Matrix"
]]></code></script>
    <inport name="script" type="string"/>
    <outport name="type" type="string"/>
  </inline>

  <inline name="CreateNumpyVectorFromString">
    <script><code><![CDATA[
print "Entering in CreateNumpyVectorFromString"
import numpy
vector = numpy.matrix(vector_in_string)
type = "Vector"
print "Vector is", vector
]]></code></script>
    <inport name="vector_in_string" type="string"/>
    <outport name="vector" type="pyobj"/>
    <outport name="type" type="string"/>
  </inline>

  <inline name="CreateNumpyVectorFromScript">
    <script><code><![CDATA[
print "Entering in CreateNumpyVectorFromScript"
execfile(script)
type = "Vector"
]]></code></script>
    <inport name="script" type="string"/>
    <outport name="type" type="string"/>
  </inline>

  <inline name="SimpleExecuteDirectAlgorithm">
    <script><code><![CDATA[
print "Entering in SimpleExecuteDirectAlgorithm"
from daYacsIntegration.daStudy import *
ADD = Study.getAssimilationStudy()
ADD.analyze()
]]></code></script>
    <inport name="Study" type="pyobj"/>
    <outport name="Study" type="pyobj"/>
  </inline>

  <inline name="SimpleUserAnalysis">
    <script><code><![CDATA[
#-*-coding:iso-8859-1-*-
print "Entering in SimpleUserAnalysis"
from daYacsIntegration.daStudy import *
ADD = Study.getAssimilationStudy()
# User code is below

]]></code></script>
    <inport name="Study" type="pyobj"/>
  </inline>

  <inline name="FakeOptimizerLoopNode">
    <script><code><![CDATA[
print "Entering in FakeOptimizerLoopNode"
result = None
]]></code></script>
    <inport name="computation" type="pyobj"/>
    <outport name="result" type="pyobj"/>
  </inline>

  <inline name="CreateDictFromScript">
    <script><code><![CDATA[
print "Entering in CreateDictFromScript"
execfile(script)
]]></code></script>
    <inport name="script" type="string"/>
  </inline>

</proc>
