#-*-coding:iso-8859-1-*-
study_config = {}
study_config["Name"] = "test017_3DVAR"
study_config["Algorithm"] = "3DVAR"

Background_config = {}
Background_config["Data"] = "@prefix@/tests/daSalome/test017_3DVAR_init_data.py"
Background_config["Type"] = "Vector"
Background_config["From"] = "Script"
study_config["Background"] = Background_config

BackgroundError_config = {}
BackgroundError_config["Data"] = "@prefix@/tests/daSalome/test017_3DVAR_init_data.py"
BackgroundError_config["Type"] = "Matrix"
BackgroundError_config["From"] = "Script"
study_config["BackgroundError"] = BackgroundError_config

Observation_config = {}
Observation_config["Data"] = "@prefix@/tests/daSalome/test017_3DVAR_init_data.py"
Observation_config["Type"] = "Vector"
Observation_config["From"] = "Script"
study_config["Observation"] = Observation_config

ObservationError_config = {}
ObservationError_config["Data"] = "@prefix@/tests/daSalome/test017_3DVAR_init_data.py"
ObservationError_config["Type"] = "Matrix"
ObservationError_config["From"] = "Script"
study_config["ObservationError"] = ObservationError_config

FunctionDict = {}
FunctionDict["Function"] = ["Direct", "Tangent", "Adjoint"]
FunctionDict["Script"] = {}
FunctionDict["Script"]["Direct"] = "@prefix@/tests/daSalome/test017_3DVAR_function_script.py"
FunctionDict["Script"]["Tangent"] = "@prefix@/tests/daSalome/test017_3DVAR_function_script.py"
FunctionDict["Script"]["Adjoint"] = "@prefix@/tests/daSalome/test017_3DVAR_function_script.py"
ObservationOperator_config = {}
ObservationOperator_config["Data"] = FunctionDict
ObservationOperator_config["Type"] = "Function"
ObservationOperator_config["From"] = "Dict"
study_config["ObservationOperator"] = ObservationOperator_config

Analysis_config = {}
Analysis_config["Data"] = """
import numpy

dimension = 300
precision = 1.e-10
xt = numpy.matrix(numpy.arange(dimension)).T
xb = Study.getBackground()

xa = numpy.array(ADD.get("Analysis").valueserie(0))
d  = numpy.array(ADD.get("Innovation").valueserie(0))
#
# Verification du resultat
# ------------------------
if max(abs(xa - (xb+xt.A1)/2)) > precision:
    raise ValueError("Resultat du test errone (1)")
else:
    print "    Test correct, erreur maximale inferieure à %s"%precision
"""
Analysis_config["From"] = "String"
study_config["Analysis"] = Analysis_config
