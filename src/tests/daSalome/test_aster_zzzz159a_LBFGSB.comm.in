
ASSIMILATION_STUDY(Study_name='aster_zzzz159a_LBFGSB',
                   Study_repertory='@prefix@/tests/daSalome',
                   Debug=0,
                   Algorithm='3DVAR',
                   Background=_F(INPUT_TYPE='Vector',
                                 data=_F(FROM='Script',
                                         SCRIPT_FILE=
                            'test_aster_zzzz159a_background.py',),),
                   BackgroundError=_F(INPUT_TYPE='Matrix',
                                      data=_F(FROM='Script',
                                              SCRIPT_FILE=
                      'test_aster_zzzz159a_background_error.py',),),
                   Observation=_F(INPUT_TYPE='Vector',
                                  data=_F(FROM='Script',
                                          SCRIPT_FILE=
                           'test_aster_zzzz159a_observation.py',),),
                   ObservationError=_F(INPUT_TYPE='Matrix',
                                       data=_F(FROM='Script',
                                               SCRIPT_FILE=
                     'test_aster_zzzz159a_observation_error.py',),),
                   ObservationOperator=_F(INPUT_TYPE='Function',
                                          data=_F(FROM='FunctionDict',
                                                  FUNCTIONDICT_FILE=
                             'test_aster_zzzz159a_functions.py',),),
                   AlgorithmParameters=_F(INPUT_TYPE='Dict',
                                          data=_F(FROM='Script',
                                                  SCRIPT_FILE=
                 'test_aster_zzzz159a_init_algorithm_LBFGSB.py',),),
                   UserDataInit=_F(INIT_FILE=
                       'test_aster_zzzz159a_init_parameters.py',
                                   TARGET_LIST=
                                   ('BackgroundError','Observation',
                                                 'ObservationError','ObservationOperator','AlgorithmParameters',
                                                 'UserPostAnalysis','Background',),),
                   UserPostAnalysis=_F(FROM='String',
                                       STRING=
"""import numpy
import os
xa = ADD.get("Analysis")[0]
Innovation = ADD.get("Innovation")[0]
A = []
J = ADD.get("CostFunctionJ")[:]
ADD.setDiagnostic("PlotVectors", "J")
MonPlot = ADD.get("J")
if os.path.isfile("recherche_xx_Fonctionnelles.ps"):
  os.remove("recherche_xx_Fonctionnelles.ps")
MonPlot.calculate([J,ADD.get("CostFunctionJb")[:],ADD.get("CostFunctionJo")[:]],
    title = "Fonctionnelles J, Jb et Jo",
    ltitle = ["J","Jb","Jo"],
    xlabel = "Pas", ylabel = "Valeur",
    filename = "recherche_xx_Fonctionnelles.ps",
    pause = False )
nbmesures = 11 # De 0 vers 1 par pas de 0.1
instants = numpy.array([0.1*i for i in range(nbmesures)])
yo = []
for reponse in init_data['experience']:
    for t,v in list(reponse):
        if min(abs(t - instants)) < 1.e-8:
            yo.append(v)
xb = []
Bornes = []
for parametre in init_data['parametres']:
    xb.append( parametre[1] )
    Bornes.append( parametre[2:4] )
B  = numpy.matrix(numpy.core.identity(len(xb)))
alpha  = 1.e14
B[0,0] = alpha * 100
B[1,1] = alpha * 10
B[2,2] = alpha * 1
# Calcul de la RMS
# ----------------
import test_aster_zzzz159a_aster_functions as Code_Aster
Hxa = Code_Aster.Calcul_Aster_Ponctuel( xa )
V1 = numpy.array(Hxa)
V2 = numpy.array(yo)
import math
rms = math.sqrt( ((V2 - V1)**2).sum() / float(V1.size) )
print
print "========="
print "Ebauche = ",xb
print "Analyse = ",xa
print "RMS     = ",rms
print
print "NbSteps = ",len(J)
print "J       = ",J
print
print "B[0,0]  = ",B[0,0]
print "B[1,1]  = ",B[1,1]
print "B[2,2]  = ",B[2,2]
print "Bornes  = ",Bornes
print "========="
print
""",),
                   InputVariables=_F(NAMES=('YOUN__','DSDE__','SIGY__',),
                                     SIZES=(1,1,1,),),
                   OutputVariables=_F(NAMES=('REPONSE1','REPONSE2',),
                                      SIZES=(11,11,),),);
