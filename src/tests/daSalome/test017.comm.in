
ASSIMILATION_STUDY(Study_name='test017',
                   Study_repertory='@prefix@/tests/daSalome',
                   Debug=0,
                   Algorithm='3DVAR',
                   Background=_F(INPUT_TYPE='Vector',
                                 data=_F(FROM='Script',
                                         SCRIPT_FILE=
                           'test017_3DVAR_init_data.py',),),
                   BackgroundError=_F(INPUT_TYPE='Matrix',
                                      data=_F(FROM='Script',
                                              SCRIPT_FILE=
                           'test017_3DVAR_init_data.py',),),
                   Observation=_F(INPUT_TYPE='Vector',
                                  data=_F(FROM='Script',
                                          SCRIPT_FILE=
                           'test017_3DVAR_init_data.py',),),
                   ObservationError=_F(INPUT_TYPE='Matrix',
                                       data=_F(FROM='Script',
                                               SCRIPT_FILE=
                           'test017_3DVAR_init_data.py',),),
                   ObservationOperator=_F(INPUT_TYPE='Function',
                                          data=_F(FROM='FunctionDict',
                                                  FUNCTIONDICT_FILE=
                     'test017_3DVAR_function_script.py',),),
                   UserPostAnalysis=_F(FROM='String',
                                       STRING=
"""import numpy
dimension = 300
precision = 1.e-10
xt = numpy.matrix(numpy.arange(dimension)).T
xb = Study.getBackground()
xa = numpy.array(ADD.get("Analysis")[0])
d  = numpy.array(ADD.get("Innovation")[0])
#
# Verification du resultat
# ------------------------
if max(abs(xa - (xb+xt.A1)/2)) > precision:
    raise ValueError("Resultat du test errone (1)")
else:
    print "    Test correct, erreur maximale inferieure à %s"%precision
""",),);
