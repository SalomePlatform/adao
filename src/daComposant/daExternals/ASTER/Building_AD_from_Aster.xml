<?xml version='1.0' encoding='iso-8859-1' ?>
<proc>
   <property name="DefaultStudyID" value="1"/>
   <type name="bool" kind="bool"/>
   <sequence name="boolvec" content="bool"/>
   <type name="double" kind="double"/>
   <sequence name="dblevec" content="double"/>
   <objref name="file" id="file"/>
   <type name="int" kind="int"/>
   <sequence name="intvec" content="int"/>
   <objref name="pyobj" id="python:obj:1.0"/>
   <sequence name="seqdblevec" content="dblevec"/>
   <type name="string" kind="string"/>
   <sequence name="stringvec" content="string"/>
   <container name="DefaultContainer">
      <property name="container_name" value="FactoryServer"/>
      <property name="hostname" value="localhost"/>
   </container>
   <inline name="Building_B">
      <script><code><![CDATA[# Construction de la matrice de covariances d'erreurs d'ebauche
import numpy

dimension = len( parametres )

B  = numpy.matrix(numpy.core.identity(dimension))
B = B.A1
]]></code></script>
      <inport name="parametres" type="pyobj"/>
      <outport name="B" type="dblevec"/>
   </inline>
   <inline name="Building_R">
      <script><code><![CDATA[# Construction de la matrice de covariances d'erreurs de mesure
import numpy

dimension = len( experiences ) * len( experiences[0] )

R  = numpy.matrix(numpy.core.identity(dimension))
R = R.A1
]]></code></script>
      <inport name="experiences" type="pyobj"/>
      <outport name="R" type="dblevec"/>
   </inline>
   <inline name="Building_Xb">
      <script><code><![CDATA[# Script pour extraire l'ebauche comme une liste
# et une liste de bornes [min,max]

dx = 1.e-2 # Increment en pourcent de Xb

Xb = []
dXb = []
Bornes = []

for parametre in parametres:
    Xb.append( parametre[1] )
    dXb.append( dx * parametre[1] )
    Bornes.append( parametre[2:4] )
]]></code></script>
      <inport name="parametres" type="pyobj"/>
      <outport name="Xb" type="dblevec"/>
      <outport name="Bornes" type="seqdblevec"/>
      <outport name="dXb" type="dblevec"/>
   </inline>
   <inline name="Building_Yo">
      <script><code><![CDATA[# Script pour extraire l'es mesures/observations et leur nom
# comme une liste

if len(calcul) != len(experiences):
    raise ValueError("Les nombres de variables calculees et observees doient etre les memes")

if len(experiences) >=1:
    nb_observations_par_experience = len( experiences[0] )

Yo     = []
Nom_Yo = []

for i in range( len(experiences) ):
    Nom_Yo.append( calcul[i][2] )
    if len( experiences[i] ) != nb_observations_par_experience:
        raise ValueError("Le nombre de mesures par serie experimentale doit etre constant egal a %i mais la serie %i est longue de %i"%(nb_observations_par_experience,i,len(experiences[i])))
    for observation in experiences[i]:
        Yo.append( observation[1] )
]]></code></script>
      <inport name="calcul" type="pyobj"/>
      <inport name="experiences" type="pyobj"/>
      <outport name="Yo" type="dblevec"/>
      <outport name="Nom_Yo" type="stringvec"/>
   </inline>
   <inline name="Entrees du calcul AD">
      <script><code><![CDATA[import numpy

print
print "### ============================================================="
print "### Verification des arguments fabriques pour passer d'Aster a AD"
print
print "    Tailles et types :"
print "      de Xb",len(Xb),type(Xb)
print "      de Yo",len(Yo),type(Yo)
print "      de B ",len(B),type(B)
print "      de R ",len(R),type(R)
print "      de H ",len(H),type(H)
print
print "    Verification de remise a l'echelle :"
dimensionXb = len( Xb )
dimensionYo = len( Yo )
print "      de B"
numpyB = numpy.matrix( B, numpy.float ).reshape((dimensionXb,dimensionXb))
print "      de R"
numpyR = numpy.matrix( R, numpy.float ).reshape((dimensionYo,dimensionYo))
print "      de H"
numpyH = numpy.matrix( H, numpy.float ).reshape((dimensionYo,dimensionXb))
print "### ============================================================="
print
]]></code></script>
      <inport name="Xb" type="dblevec"/>
      <inport name="Yo" type="dblevec"/>
      <inport name="B" type="dblevec"/>
      <inport name="R" type="dblevec"/>
      <inport name="H" type="dblevec"/>
      <outport name="Xb" type="dblevec"/>
      <outport name="Yo" type="dblevec"/>
      <outport name="B" type="dblevec"/>
      <outport name="R" type="dblevec"/>
      <outport name="H" type="dblevec"/>
   </inline>
   <inline name="Sorties du calcul AD">
      <script><code><![CDATA[import numpy
print "Diagnostics de sortie de test :"
print "  Remise en numpy des resultats"
Xa = numpy.array(xa)
Xb = numpy.array(xb)
dimensionXb = len( Xb )
dimensionYo = len( Yo )
print "Verification de remise a l'echelle de B, R et H"
B = numpy.matrix( B, numpy.float ).reshape((dimensionXb,dimensionXb))
R = numpy.matrix( R, numpy.float ).reshape((dimensionYo,dimensionYo))
H = numpy.matrix( H, numpy.float ).reshape((dimensionYo,dimensionXb))
I = numpy.matrix(numpy.core.identity(dimensionYo))
deltaB = Xa - Xb
deltaA = (Yo - numpy.dot(H,Xa)).A1
deltaI = (Yo - numpy.dot(H,Xb)).A1
print "Calcul de LS"
print "deltaA",deltaA
LS = float(numpy.dot(deltaA, deltaA))
print "Calcul de LSI"
LSI = float(numpy.dot(deltaI, deltaI))
print "Calcul de J"
J = float( numpy.dot(deltaB, numpy.dot(B,deltaB).A1) + numpy.dot(deltaA, numpy.dot(R,deltaA).A1) )
print "Calcul de JI"
JI = float( numpy.dot(deltaI, numpy.dot(R,deltaI).A1) )

print
print "Sortie du test :"
print "  Xb =",Xb
print "  Xa =",Xa
print "Difference Xa-Xb :"
print "  Xa-Xb      =",deltaB
print "  max(Xa-Xb) =",max(deltaB)
print "  min(Xa-Xb) =",min(deltaB)
print "Fonctionnelles d'ecarts :"
print "  Initialement : J  =",JI
print "                 LS =",LSI
print "  Analyse      : J  =",J,"(Baise de %i%s)"%(100.*(JI-J)/J,"%")
print "                 LS =",LS,"(Baise de %i%s)"%(100.*(LSI-LS)/LSI,"%")
print "Autres informations :"
print "  d  =",Innovation
print "  A  =",A
print
]]></code></script>
      <inport name="xa" type="dblevec"/>
      <inport name="A" type="dblevec"/>
      <inport name="Innovation" type="dblevec"/>
      <inport name="xb" type="dblevec"/>
      <inport name="Yo" type="dblevec"/>
      <inport name="B" type="dblevec"/>
      <inport name="R" type="dblevec"/>
      <inport name="H" type="dblevec"/>
   </inline>
   <parameter>
      <tonode>Building_B</tonode><toport>parametres</toport>
      <value><objref>(lp1
.</objref></value>
   </parameter>
   <parameter>
      <tonode>Building_Xb</tonode><toport>parametres</toport>
      <value><objref>(lp1
.</objref></value>
   </parameter>
   <parameter>
      <tonode>Building_Yo</tonode><toport>calcul</toport>
      <value><objref>(lp1
.</objref></value>
   </parameter>
   <parameter>
      <tonode>Building_Yo</tonode><toport>experiences</toport>
      <value><objref>(lp1
.</objref></value>
   </parameter>
   <parameter>
      <tonode>Sorties du calcul AD</tonode><toport>xa</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Sorties du calcul AD</tonode><toport>A</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Sorties du calcul AD</tonode><toport>Innovation</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Sorties du calcul AD</tonode><toport>xb</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Sorties du calcul AD</tonode><toport>Yo</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Sorties du calcul AD</tonode><toport>B</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Sorties du calcul AD</tonode><toport>R</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Sorties du calcul AD</tonode><toport>H</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Building_R</tonode><toport>experiences</toport>
      <value><objref>(lp1
.</objref></value>
   </parameter>
   <parameter>
      <tonode>Entrees du calcul AD</tonode><toport>Xb</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Entrees du calcul AD</tonode><toport>Yo</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Entrees du calcul AD</tonode><toport>B</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Entrees du calcul AD</tonode><toport>R</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <parameter>
      <tonode>Entrees du calcul AD</tonode><toport>H</toport>
      <value><array><data>
</data></array></value>
   </parameter>
   <presentation name="Building_B" x="9" y="81.5" width="227.5" height="110"/>
   <presentation name="Building_Xb" x="9" y="233" width="227.5" height="168"/>
   <presentation name="Building_Yo" x="249" y="231" width="227.5" height="139"/>
   <presentation name="Sorties du calcul AD" x="246" y="432" width="223" height="313"/>
   <presentation name="Building_R" x="250" y="84.5" width="227.5" height="110"/>
   <presentation name="Entrees du calcul AD" x="9" y="429" width="227.5" height="226"/>
   <presentation name="__ROOT__" x="0" y="0" width="487" height="754"/>
</proc>
